plugins {
    id 'application'
    id 'io.quarkus' version '1.4.2.Final'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    google()
    maven {
        url "http://download.java.net/maven/2/"
    }
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
   }
    maven {
        url "http://repo.boundlessgeo.com/main/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    flatDir {
        dirs 'thirdparty-libs'
    }
}


dependencies {
    implementation enforcedPlatform('io.quarkus:quarkus-bom:1.4.2.Final')
    implementation 'io.quarkus:quarkus-resteasy:1.4.2.Final'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.mongodb:mongodb-driver-sync:4.0.3'
    implementation 'org.mongodb:mongodb-driver:3.0.4'
    implementation 'org.apache.kafka:kafka-clients:2.4.0'
    implementation 'org.springframework.kafka:spring-kafka:2.4.1.RELEASE'
    implementation 'com.google.code.gson:gson:2.8.6'
    //implementation('org.apache.hadoop:hadoop-mapreduce-client-core:2.7.2') {force = true}
    //implementation('org.apache.hadoop:hadoop-common:2.7.2') {force = true} // required for org.apache.hadoop.util.StopWatch
    implementation 'org.springframework:spring-web:5.2.1.RELEASE'
    implementation 'io.kubernetes:client-java:5.0.0'
    implementation 'io.kubernetes:client-java-api:7.0.0'
    implementation 'org.kamranzafar:jtar:2.3'

    implementation 'org.apache.spark:spark-core_2.12:2.4.5'
    implementation 'org.apache.spark:spark-sql_2.12:2.4.5'
    implementation 'io.delta:delta-core_2.12:0.6.1'
    implementation 'org.apache.parquet:parquet-hadoop:1.11.0'
    implementation 'org.apache.parquet:parquet-avro:1.11.0'
    implementation 'org.apache.parquet:parquet-common:1.11.0'
    implementation 'org.apache.parquet:parquet-column:1.11.0'
    implementation 'com.univocity:univocity-parsers:2.8.4'
    implementation ('com.fasterxml.jackson.core:jackson-databind:2.9.10') {force = true}
    implementation ('com.fasterxml.jackson.module:jackson-module-scala_2.12:2.9.10') {force = true}
    implementation 'org.apache.xbean:xbean-asm6-shaded:4.10'
    implementation 'com.github.opendevl:json2flat:1.0.3'

    implementation name: 'eclipse-swt-macos'
    implementation name: 'jface-3.7.0'
    implementation name: 'jface-databinding-1.5.0'
    implementation name: 'eclipse-ui-3.7.0'
    implementation name: 'eclipse-ui-workbench-3.7.1'
    implementation name: 'eclipse-core-runtime-3.7.0'
    implementation name: 'eclipse-core-runtime-auth-3.2.200'
    implementation name: 'eclipse-core-commands-3.6.0'
    implementation name: 'runtime_registry_compatibility'
    implementation name: 'SchemaStoreClient'
    implementation name: 'SchemaStorePorters'
    implementation name: 'SchemaStoreWarehouse'
    implementation name: 'gephi-toolkit'
    implementation name: 'affinity-fatjar'
    implementation name: 'LinkCommunityFinder'
    implementation name: 'collections-generic-4.01'
    implementation name: 'jung-algorithms-2.0.1'
    implementation name: 'jung-api-2.0.1'
    implementation name: 'org.eclipse.equinox.app_1.3.100.v20110321'
    implementation name: 'org.eclipse.equinox.common_3.6.0.v20110523'
    implementation name: 'org.eclipse.equinox.launcher_1.2.0.v20110502'
    implementation name: 'org.eclipse.equinox.launcher_1.2.0.v20110502'
    implementation name: 'org.eclipse.equinox.preferences_3.4.2.v20120111-2020'
    implementation name: 'org.eclipse.equinox.registry_3.5.101.R37x_v20110810-1611'
    implementation name: 'GoogleTranslate'


    //testImplementation 'org.junit.platform:junit-platform-commons:1.5.2'
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation enforcedPlatform('io.quarkus:quarkus-bom:1.4.2.Final')
    testImplementation 'io.quarkus:quarkus-junit5:1.4.2.Final'
    testImplementation 'io.rest-assured:rest-assured:4.3.0'
}

//application {
   mainClassName = 'org.gradle.sample.Main'
//}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

test {
    useJUnitPlatform()
    filter {
        //include specific method in any of the tests
        includeTestsMatching "*Tests"
        includeTestsMatching "*Test"

        //include all tests from package
        //includeTestsMatching "org.gradle.internal.*"

        //include all integration tests
        //includeTestsMatching "*IntegTest"
    }
    //createPom();
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // augment your pom here if necessary
        }
    }
}

task createPom(type: Copy) {
    description 'This is workaround to generate pom.xml.disable, needed for @QuarkusTest tests.'
    dependsOn('generatePomFileForMavenJavaPublication')
    from "$buildDir/publications/mavenJava/pom-default.xml"
    into '.'
    rename('pom-default.xml', 'pom.xml.disable')
}

configurations {
    project.sourceCompatibility = '1.8'
    project.targetCompatibility = '1.8'
}

//def integrationTest = tasks.register('integrationTest', Test) {
//    description = 'Runs integration tests.'
//    group = 'verification'

//    testClassesDirs = sourceSets.integrationTest.output.classesDirs
//    classpath = sourceSets.integrationTest.runtimeClasspath
//    shouldRunAfter('test')
//}

//tasks.named('check') { dependsOn(integrationTest) }